#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node*left;
    struct node*right;
};
struct node*getnode(int n);
struct node*insert(struct node*root,int data);
void preorder(struct node*ptr);
void postorder(struct node*ptr);
void inorder(struct node*ptr);
int main()
{
    struct node*root=NULL,*ptr;
    int ch,k;
    while(1)
    {
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:scanf("%d",&k);
                   root=insert(root,k);
                   break;
            case 2:if(root==NULL)
                   {
                       printf("\nBST EMPTY");
                   }
                   else
                   {
                       printf("\nPREORDER TRAVERSAL OF BINARY SEARCH TREE\n");
                       preorder(root);
                   }
                   break;
            case 3:if(root==NULL)
                   {
                       printf("\nBST EMPTY");
                   }
                   else
                   {
                       printf("\nINORDER TRAVERSAL OF BINARY SEARCH TREE\n");
                       inorder(root);
                   }
                   break;
            case 4:if(root==NULL)
                   {
                       printf("\nBST EMPTY");
                   }
                   else
                   {
                       printf("\nPOSTORDER TRAVERSAL OF BINARY SEARCH TREE\n");
                       postorder(root);
                   }
                   break;
            case 5:exit(0);
            default:printf("\nInvalid Choice");
        }
    }
    return 0;
}
struct node*getnode(int n)
{
    struct node*temp=(struct node*)malloc(sizeof(struct node));
    temp->data=n;
    temp->left=NULL;
    temp->right=NULL;
    return temp;
}
struct node*insert(struct node*root,int data)
{
    if(root==NULL)
    {
        root=getnode(data);
        return root;
    }
    else if(data<=root->data)
    {
        root->left=insert(root->left,data);
    }
    else
    {
        root->right=insert(root->right,data);
    }
    return root;
}
void postorder(struct node*ptr)
{
    if(ptr==NULL)
    return;
    postorder(ptr->left);
    postorder(ptr->right);
    printf("%d ",ptr->data);
}
void preorder(struct node*ptr)
{
    if(ptr==NULL)
    return;
    printf("%d ",ptr->data);
    preorder(ptr->left);
    preorder(ptr->right);
}
void inorder(struct node*ptr)
{
    if(ptr==NULL)
    return;
    inorder(ptr->left);
    printf("%d ",ptr->data);
    inorder(ptr->right);
}